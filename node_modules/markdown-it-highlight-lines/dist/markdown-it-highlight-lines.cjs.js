'use strict';

var RE = /{([\d,-]+)}/;
var index = (function (md) {
  var fence = md.renderer.rules.fence;

  md.renderer.rules.fence = function () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var tokens = args[0];
    var idx = args[1];
    var options = args[2];
    var self = args[4];
    var token = tokens[idx];

    if (!token.info || !RE.test(token.info)) {
      return fence.apply(void 0, args);
    }

    var lineNumbers = RE.exec(token.info)[1].split(',').map(function (v) { return v.split('-').map(function (v) { return parseInt(v, 10); }); });
    var langName = token.info.replace(RE, '').trim();
    var code = options.highlight ? options.highlight(token.content, langName) : token.content;
    var codeSplits = code.split('\n').map(function (split, index) {
      var lineNumber = index + 1;
      var inRange = lineNumbers.some(function (ref) {
        var start = ref[0];
        var end = ref[1];

        if (start && end) {
          return lineNumber >= start && lineNumber <= end;
        }

        return lineNumber === start;
      });

      if (inRange) {
        return {
          code: ("<span class=\"highlighted-line\">" + split + "</span>"),
          highlighted: true
        };
      }

      return {
        code: split
      };
    });
    var highlightedCode = '';
    codeSplits.forEach(function (split) {
      if (split.highlighted) {
        highlightedCode += split.code;
      } else {
        highlightedCode += (split.code) + "\n";
      }
    }); // If custom highlighter wraps code with starting <pre..., don't wrap code

    if (highlightedCode.startsWith('<pre')) {
      return highlightedCode;
    }

    var tmpToken = {
      attrs: [['class', langName ? ("language-" + langName) : '']]
    };
    var attrs = self.renderAttrs(tmpToken);
    return ("<pre" + attrs + "><code" + attrs + ">" + (highlightedCode.trim()) + "</code></pre>");
  };
});

module.exports = index;
